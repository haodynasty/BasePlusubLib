apply plugin: 'com.android.application'
apply from:gradle.utilsGradle

initProperty()

version = "1.0"
def today = new Date().format('yyyyMMdd');

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.plusub.lib.example"
        minSdkVersion 14
        targetSdkVersion 18
        versionCode 1
        versionName version
        //dex突破65535的限制
        multiDexEnabled true
        //在BuildConfig文件中生成bool字段AUTO_UPDATES默认为true
        buildConfigField "boolean", "AUTO_UPDATES", "true"
        //设置输出app默认前缀名称
        project.ext.set("archivesBaseName", "PlusubLibExample_v" + versionName + "_"+today);

        //test
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }

    //签名配置
    signingConfigs {
        debug {
            //这样写就得把plusub_keystore.key文件放在项目app目录下，否则写实际路径
            //如/home/lippi/.android/debug.keystore
            //storeFile file("file://${project.gradle.debugKeystore}")
            storeFile file(STORE_FILE)
            storePassword STORE_PWD
            keyAlias KEY_ALIAS
            keyPassword KEY_PWD
        }
        release {
            storeFile file(STORE_FILE)
            storePassword STORE_PWD
            keyAlias KEY_ALIAS
            keyPassword KEY_PWD
        }
    }

    //构建配置
    buildTypes {
        debug {

        }
        release {
            minifyEnabled false //是否进行混淆
            shrinkResources true //是否去除无效的资源文件
            zipAlignEnabled true //zipAlign优化
            //混淆配置文件，proguard-rules.txt放置在app目录下，如果没有则写实际路径
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release //签名配置
            //重命名release的输出app的名称
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    if (output.outputFile != null && output.outputFile.name.endsWith('.apk')
                            &&'release'.equals(variant.buildType.name)) {
                        def apkFile = new File(
                                output.outputFile.getParent(),
                                "PlusubLibExample_v${variant.versionName}_${today}_${variant.flavorName}.apk")
                        output.outputFile = apkFile
                    }
                }
            }
        }
    }

    //多渠道构建配置
    productFlavors {
//        "xiaomi"{
//            //在xiaomi发布版中改变BuildConfig值AUTO_UPDATES为false
//            buildConfigField "boolean", "AUTO_UPDATES", "false"
//            //在xiaomi发布版中设置applicationId
//            applicationId "com.plusub.xiaomi"
//            testApplicationId "com.plusub.xiaomi.test"
//            versionCode 3
//            versionName "3.0"
//        }
        "qihu360"{}
//        "baidu"{}
//        "wandoujia"{
//            applicationId "com.plusub.wandoujia"
//        }
    }

    //循环设置channelName名字，channelName是在manifest文件中定义的
    productFlavors.all {flavor ->
        flavor.manifestPlaceholders = [channelName: name]
    }

    //打包过滤文件
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
//        exclude 'META-INF/DEPENDENCIES.txt'
//        exclude 'META-INF/NOTICE'
//        exclude 'META-INF/LICENSE'
//        exclude 'META-INF/DEPENDENCIES'
//        exclude 'META-INF/notice.txt'
//        exclude 'META-INF/license.txt'
//        exclude 'META-INF/dependencies.txt'
//        exclude 'META-INF/LGPL2.1'
    }
}

//查找Class类型为JavaCompile的任务，并且设置该任务编码为utf-8
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile(name: 'pulltorefresh_lib', ext: 'aar')
    compile 'com.android.support:support-v4:22.2.0'
    compile 'com.nineoldandroids:library:2.4.0'

    //test provided
    //发布到360版本的用Compile在编译和打包都包含fastjson库，非360用provided只是在编译时使用包，不打包
    provided 'com.alibaba:fastjson:1.1.45.android'
    qihu360Compile 'com.alibaba:fastjson:1.1.45.android'

    //1.直接依赖包
//    compile(name: 'PlusubBaseViewLib-release', ext: 'aar')

    //2.依赖工程
//    compile project(':PlusubBaseViewLib')

    //依赖远程库
    compile 'com.plusub.lib:PlusubBaseViewLib:1.0.2@aar'
}


